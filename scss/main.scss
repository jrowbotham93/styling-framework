// Color
// ––––––––––––––––––––––––––––––––––––––––––––––––––
$color-initial: #fff !default;
$color-primary: #000000 !default;
$color-secondary: #d0eaff !default;
$color-tertiary: #c7ffe5 !default;
$color-quaternary: #edd3ff !default;
$color-quinary: #e1e1e1 !default;

// Base
// ––––––––––––––––––––––––––––––––––––––––––––––––––
// Set box-sizing globally to handle padding and border widths
*,
*:after,
*:before {
  box-sizing: inherit;
}

body {
  font-family: 'Roboto', 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
  font-weight: 300;
  letter-spacing: 0.01em;
  line-height: 1.6;
}

// Typography
// ––––––––––––––––––––––––––––––––––––––––––––––––––

@mixin interpolate(
  $properties,
  $min-screen,
  $max-screen,
  $min-value,
  $max-value
) {
  & {
    @each $property in $properties {
      #{$property}: $min-value;
    }

    @media screen and (min-width: $min-screen) {
      @each $property in $properties {
        #{$property}: calc-interpolation(
          $min-screen,
          $min-value,
          $max-screen,
          $max-value
        );
      }
    }

    @media screen and (min-width: $max-screen) {
      @each $property in $properties {
        #{$property}: $max-value;
      }
    }
  }
}

// Requires the calc-interpolation function which can also be used independently

@function calc-interpolation($min-screen, $min-value, $max-screen, $max-value) {
  $a: ($max-value - $min-value) / ($max-screen - $min-screen);
  $b: $min-value - $a * $min-screen;

  $sign: '+';
  @if ($b < 0) {
    $sign: '-';
    $b: abs($b);
  }
  @return calc(#{$a * 100}vw #{$sign} #{$b});
}

/* Single property */
html {
  box-sizing: border-box;
  @include interpolate(font-size, 320px, 1366px, 16px, 20px);
}

/* Multiple properties with same values */
h1,
h2,
h3,
h4,
h5,
h6 {
  font-weight: 400;
  letter-spacing: -0.1rem;
  margin-bottom: 2rem;
  margin-top: 0;

  @include interpolate(
    (padding-top, padding-bottom),
    20rem,
    70rem,
    0rem,
    0.5rem
  );
}

h1 {
  line-height: 1.2;
}
h2 {
  line-height: 1.25;
}
h3 {
  line-height: 1.3;
}
h4 {
  line-height: 1.5;
  letter-spacing: -0.08rem;
}
h5 {
  line-height: 1.5;
  letter-spacing: -0.05rem;
}
h6 {
  letter-spacing: 0;
  line-height: 1.4;
}

b,
strong {
  font-weight: bold;
}
p {
  margin-top: 0;
}

// Grid
// ––––––––––––––––––––––––––––––––––––––––––––––––––
// .container is main centered wrapper with a max width of 112.0rem (1120px)
.container {
  margin: 0 auto;
  max-width: 112rem;
  padding: 0 2rem;
  position: relative;
  width: 100%;
}
.row {
  display: flex;
  flex-direction: column;
  padding: 0;
  width: 100%;

  &.row-no-padding {
    padding: 0;
    & > .column {
      padding: 0;
    }
  }

  &.row-wrap {
    flex-wrap: wrap;
  }
  // Vertically Align Columns
  // .row-* vertically aligns every .col in the .row
  &.row-top {
    align-items: flex-start;
  }
  &.row-bottom {
    align-items: flex-end;
  }
  &.row-center {
    align-items: center;
  }
  &.row-stretch {
    align-items: stretch;
  }
  &.row-baseline {
    align-items: baseline;
  }
}
.column {
  display: block;
  // IE 11 required specifying the flex-basis otherwise it breaks mobile
  flex: 1 1 auto;
  margin-left: 0;
  max-width: 100%;
  width: 100%;

  // Column Offsets
  &.column-offset-10 {
    margin-left: 10%;
  }
  &.column-offset-20 {
    margin-left: 20%;
  }
  &.column-offset-25 {
    margin-left: 25%;
  }
  &.column-offset-33,
  &.column-offset-34 {
    margin-left: 33.3333%;
  }
  &.column-offset-40 {
    margin-left: 40%;
  }
  &.column-offset-50 {
    margin-left: 50%;
  }
  &.column-offset-60 {
    margin-left: 60%;
  }
  &.column-offset-66,
  &.column-offset-67 {
    margin-left: 66.6666%;
  }
  &.column-offset-75 {
    margin-left: 75%;
  }
  &.column-offset-80 {
    margin-left: 80%;
  }
  &.column-offset-90 {
    margin-left: 90%;
  }

  // Explicit Column Percent Sizes
  // By default each grid column will evenly distribute
  // across the grid. However, you can specify individual
  // columns to take up a certain size of the available area
  &.column-10 {
    flex: 0 0 10%;
    max-width: 10%;
  }
  &.column-20 {
    flex: 0 0 20%;
    max-width: 20%;
  }
  &.column-25 {
    flex: 0 0 25%;
    max-width: 25%;
  }
  &.column-33,
  &.column-34 {
    flex: 0 0 33.3333%;
    max-width: 33.3333%;
  }
  &.column-40 {
    flex: 0 0 40%;
    max-width: 40%;
  }
  &.column-50 {
    flex: 0 0 50%;
    max-width: 50%;
  }
  &.column-60 {
    flex: 0 0 60%;
    max-width: 60%;
  }
  &.column-66,
  &.column-67 {
    flex: 0 0 66.6666%;
    max-width: 66.6666%;
  }
  &.column-75 {
    flex: 0 0 75%;
    max-width: 75%;
  }
  &.column-80 {
    flex: 0 0 80%;
    max-width: 80%;
  }
  &.column-90 {
    flex: 0 0 90%;
    max-width: 90%;
  }

  // .column-* vertically aligns an individual .column
  .column-top {
    align-self: flex-start;
  }
  .column-bottom {
    align-self: flex-end;
  }
  .column-center {
    align-self: center;
  }
}
// Larger than mobile screen
@media (min-width: 40rem) {
  // Safari desktop has a bug using `rem`, but Safari mobile works

  .row {
    flex-direction: row;
    margin-left: -1rem;
    width: calc(100% + 2rem);

    .column {
      margin-bottom: inherit;
      padding: 0 1rem;
    }
  }
}

.wrapper {
  display: block;
  overflow: hidden;
  position: relative;
  width: 100%;
}

// Button
// ––––––––––––––––––––––––––––––––––––––––––––––––––
.button,
button,
input[type='button'],
input[type='reset'],
input[type='submit'] {
  background-color: $color-initial;
  border: 0.1rem solid $color-primary;
  border-radius: 0.4rem;
  color: $color-primary;
  cursor: pointer;
  display: inline-block;
  height: 2.8rem;
  letter-spacing: 0.1rem;
  line-height: 2.8rem;
  padding: 0 3rem;
  text-align: center;
  text-decoration: none;
  text-transform: uppercase;
  white-space: nowrap;

  &:focus,
  &:hover {
    background-color: $color-primary;
    border-color: $color-primary;
    color: $color-initial;
    outline: 0;
  }

  &[disabled] {
    background-color: $color-quinary;
    border-color: $color-quinary;
    color: $color-primary;
    cursor: default;
    opacity: 0.5;

    &:focus,
    &:hover {
      cursor: not-allowed !important;
    }
  }
  &.button-outline {
    background-color: transparent;
    color: $color-primary;

    &:focus,
    &:hover {
      background-color: transparent;
      border-color: $color-primary;
      color: $color-primary;
    }

    &[disabled] {
      &:focus,
      &:hover {
        border-color: inherit;
        color: $color-primary;
      }
    }
  }
  &.button-clear {
    background-color: transparent;
    border-color: transparent;
    color: $color-primary;

    &:focus,
    &:hover {
      background-color: transparent;
      border-color: transparent;
      color: $color-primary;
    }

    &[disabled] {
      &:focus,
      &:hover {
        color: $color-quinary;
      }
    }
  }
}

// Spacing
// ––––––––––––––––––––––––––––––––––––––––––––––––––
.button,
button,
dd,
dt,
li {
  margin-bottom: 1rem;
}

fieldset,
input,
select,
textarea {
  margin-bottom: 1.5rem;
}

blockquote,
dl,
figure,
form,
ol,
p,
pre,
table,
ul {
  margin-bottom: 2.5rem;
}

// Divider
// ––––––––––––––––––––––––––––––––––––––––––––––––––
hr {
  border: 0;
  border-top: 0.1rem solid $color-quinary;
  margin: 3rem 0;
}

/* // Blockquote
// –––––––––––––––––––––––––––––––––––––––––––––––––– */

blockquote {
  border-left: 0.3rem solid $color-quaternary;
  margin-left: 0;
  margin-right: 0;
  padding: 1rem 1.5rem;

  *:last-child {
    margin-bottom: 0;
  }
}
